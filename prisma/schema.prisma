// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  email String @unique
  password String
  name  String
  role  Role @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  profile Profile?
  orders Order[]
  reviews Review[]
}

model Profile{
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields:[userId],references: [id])
   address       String?
  phoneNumber   String?
  dateOfBirth   DateTime?

}

model Product {
  id            String    @id @default(uuid())
  name          String
  description   String
  price         Decimal
  stock         Int
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orderItems    OrderItem[]
  reviews       Review[]
  image         String?
}

model Category {
  id            String    @id @default(uuid())
  name          String
  products      Product[]
}

model Order {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  status        OrderStatus
  totalAmount   Decimal
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orderItems    OrderItem[]
}

model OrderItem {
  id            String    @id @default(uuid())
  orderId       String
  order         Order     @relation(fields: [orderId], references: [id])
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  quantity      Int
  price         Decimal
}


model Review {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  rating        Int
  comment       String?
  createdAt     DateTime  @default(now())
}


enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}